import pandas as pdimport pandas as pdimport numpy as npimport requestsimport jsonfrom datetime import datetimeimport osimport globimport redef get_config():    # Read the content of the file    with open('config.txt', 'r') as file:        lines = file.readlines()    # Extract the value associated with first_run    configs = {}    for line in lines:        key, value = line.split('=')        key = key.strip()        value = value.strip()        configs[key] = value    return configsconfigs = get_config()# have every dataframe be a chart based data.def debug_print(words, override=False):    print(words)API_TOKEN = 'aNNepS1AiAYPA0MwXLHQphkUSFQTwZTVCDh1pRn298iydQkLyh8mrPg6IBcNnICo'def create_single_id(save_path, chartType, state, title, folderid):    print("Creating {}".format(title))    # Endpoint to create a new chart    url = 'https://api.datawrapper.de/v3/charts'    if chartType == "Timeseries":        # The configuration for the chart        chart_config = {            'title': title,            'type': 'd3-lines',            'folderId': folderid,            'metadata': {                'describe': {'source-name': 'Rent.',                             'source-url': '',                             'intro': 'Rent trends for top-five cheapest cities from February 2019 to present.',                             'byline': '',                             'aria-description': '',                             'number-format': '-',                             'number-divisor': 0,                             'number-append': '',                             'number-prepend': '',                             'hide-title': False                             },                'axes': {                    'x-axis-label': 'Date',                    'y-axis-label': 'Rent Price'                },                'dark-mode-invert': True,                'highlighted-series': [],                'highlighted-values': [],                'x-grid': 'off',                'y-grid': 'on',                'scale-y': 'linear',                'labeling': 'top',                'base-color': 0,                'line-dashes': {},                'line-widths': {},                'label-colors': False,                'label-margin': 0,                'line-symbols': False,                'interpolation': 'linear',                'show-tooltips': True,                'x-tick-format': 'MMM â€™YY',                'y-grid-format': '$1,000',                'y-grid-labels': 'auto',                'chart-type-set': True,                'custom-range-x': ['', ''],                'custom-range-y': ['', ''],                'custom-ticks-x': '',                'custom-ticks-y': '',                'connector-lines': True,                'line-symbols-on': 'both',                'text-annotations': [],                'y-grid-subdivide': True,                'custom-area-fills': [],                'line-symbols-size': 3.5,                'line-value-labels': False,                'range-annotations': [],                'line-symbols-shape': 'circle',                'y-grid-label-align': 'left',                'line-symbols-opacity': 1,                'line-symbols-shape-multiple': {}}        }    elif chartType == "Table":        chart_config = {            'title': title,            'type': 'tables',            'folderId': folderid,            'metadata': {                'describe': {'source-name': 'U.S. Census and Rent.',                             'source-url': '',                             'intro': 'Ranking of the least expensive places to live in the state of {} based on median income, median home value, and asking rents.'.format(state.title()),                             'byline': '',                             'aria-description': '',                             'number-format': '-',                             'number-divisor': 0,                             'number-append': '',                             'number-prepend': '',                             'hide-title': False                             },                'visualize': {                    'highlighted-series': [],                    'highlighted-values': [],                    'rows': {'row--1': {'style': {'bold': False,                                                  'color': False,                                                  'italic': False,                                                  'fontSize': 1,                                                  'underline': False,                                                  'background': False},                                        'format': '0,0.[00]',                                        'moveTo': 'top',                                        'sticky': False,                                        'moveRow': False,                                        'stickTo': 'top',                                        'borderTop': 'none',                                        'borderBottom': 'none',                                        'borderTopColor': '#333333',                                        'overrideFormat': False,                                        'borderBottomColor': '#333333'}},                    'header': {'style': {'bold': True,                                         'color': False,                                         'italic': False,                                         'fontSize': 1.1,                                         'background': False},                               'borderTop': 'none',                               'borderBottom': '2px',                               'borderTopColor': '#333333',                               'borderBottomColor': '#333333'},                    'legend': {'size': 170,                               'labels': 'ranges',                               'enabled': False,                               'reverse': False,                               'labelMax': 'high',                               'labelMin': 'low',                               'position': 'above',                               'hideItems': [],                               'interactive': False,                               'labelCenter': 'medium',                               'customLabels': []},                    'columns': {'Score': {'style': {'bold': False,                                                    'color': False,                                                    'italic': False,                                                    'fontSize': 1,                                                    'underline': False,                                                    'background': False},                                          'width': 0.2,                                          'append': '',                                          'format': '0.00',                                          'heatmap': {'enabled': False},                                          'prepend': '',                                          'barColor': 0,                                          'barStyle': 'normal',                                          'minWidth': 30,                                          'sortable': True,                                          'alignment': 'auto',                                          'flagStyle': '1x1',                                          'showAsBar': False,                                          'sparkline': {'area': False,                                                        'type': 'line',                                                        'color': 0,                                                        'title': '',                                                        'format': '0.[0]a',                                                        'height': 20,                                                        'stroke': 2,                                                        'dotLast': True,                                                        'enabled': False,                                                        'colorNeg': 0,                                                        'dotFirst': True,                                                        'rangeMax': '',                                                        'rangeMin': '',                                                        'labelDiff': False},                                          'borderLeft': 'none',                                          'fixedWidth': False,                                          'barRangeMax': '',                                          'barRangeMin': '',                                          'borderRight': 'none',                                          'compactMode': False,                                          'customColor': False,                                          'replaceFlags': False,                                          'showOnMobile': True,                                          'customColorBy': 0,                                          'showOnDesktop': True,                                          'customBarColor': False,                                          'barNoBackground': False,                                          'borderLeftColor': '#333333',                                          'customColorText': {'__object': True},                                          'barColorNegative': False,                                          'customBarColorBy': 0,                                          'alignmentVertical': 'middle',                                          'customColorBackground': {'__object': True},                                          'customColorBarBackground': {'__object': True}},                                'Median Income': {'style': {'bold': False,                                                            'color': False,                                                            'italic': False,                                                            'fontSize': 1,                                                            'underline': False,                                                            'background': False},                                                  'width': 0.2,                                                  'append': '',                                                  'format': '$1,000',                                                  'heatmap': {'enabled': False},                                                  'prepend': '',                                                  'barColor': 0,                                                  'barStyle': 'normal',                                                  'minWidth': 30,                                                  'sortable': True,                                                  'alignment': 'auto',                                                  'flagStyle': '1x1',                                                  'showAsBar': False,                                                  'sparkline': {'area': False,                                                                'type': 'line',                                                                'color': 0,                                                                'title': '',                                                                'format': '0.[0]a',                                                                'height': 20,                                                                'stroke': 2,                                                                'dotLast': True,                                                                'enabled': False,                                                                'colorNeg': 0,                                                                'dotFirst': True,                                                                'rangeMax': '',                                                                'rangeMin': '',                                                                'labelDiff': False},                                                  'borderLeft': 'none',                                                  'fixedWidth': False,                                                  'barRangeMax': '',                                                  'barRangeMin': '',                                                  'borderRight': 'none',                                                  'compactMode': False,                                                  'customColor': False,                                                  'replaceFlags': False,                                                  'showOnMobile': True,                                                  'customColorBy': 0,                                                  'showOnDesktop': True,                                                  'customBarColor': False,                                                  'barNoBackground': False,                                                  'borderLeftColor': '#333333',                                                  'customColorText': {'__object': True},                                                  'barColorNegative': False,                                                  'customBarColorBy': 0,                                                  'alignmentVertical': 'middle',                                                  'customColorBackground': {'__object': True},                                                  'customColorBarBackground': {'__object': True}},                                '2-Bed Asking Rent': {'style': {'bold': False,                                                                'color': False,                                                                'italic': False,                                                                'fontSize': 1,                                                                'underline': False,                                                                'background': False},                                                      'width': 0.2,                                                      'append': '',                                                      'format': '$1,000',                                                      'heatmap': {'enabled': True},                                                      'prepend': '',                                                      'barColor': 0,                                                      'barStyle': 'normal',                                                      'minWidth': 30,                                                      'sortable': True,                                                      'alignment': 'auto',                                                      'flagStyle': '1x1',                                                      'showAsBar': False,                                                      'sparkline': {'area': False,                                                                    'type': 'line',                                                                    'color': 0,                                                                    'title': '',                                                                    'format': '0.[0]a',                                                                    'height': 20,                                                                    'stroke': 2,                                                                    'dotLast': True,                                                                    'enabled': False,                                                                    'colorNeg': 0,                                                                    'dotFirst': True,                                                                    'rangeMax': '',                                                                    'rangeMin': '',                                                                    'labelDiff': False},                                                      'borderLeft': 'none',                                                      'fixedWidth': False,                                                      'barRangeMax': '',                                                      'barRangeMin': '',                                                      'borderRight': 'none',                                                      'compactMode': False,                                                      'customColor': False,                                                      'replaceFlags': False,                                                      'showOnMobile': True,                                                      'customColorBy': 0,                                                      'showOnDesktop': True,                                                      'customBarColor': False,                                                      'barNoBackground': False,                                                      'borderLeftColor': '#333333',                                                      'customColorText': {'__object': True},                                                      'barColorNegative': False,                                                      'customBarColorBy': 0,                                                      'alignmentVertical': 'middle',                                                      'customColorBackground': {'__object': True},                                                      'customColorBarBackground': {'__object': True}},                                'Median Home Value': {'style': {'bold': False,                                                                'color': False,                                                                'italic': False,                                                                'fontSize': 1,                                                                'underline': False,                                                                'background': False},                                                      'width': 0.2,                                                      'append': '',                                                      'format': '$1,000',                                                      'heatmap': {'enabled': False},                                                      'prepend': '',                                                      'barColor': 0,                                                      'barStyle': 'normal',                                                      'minWidth': 30,                                                      'sortable': True,                                                      'alignment': 'auto',                                                      'flagStyle': '1x1',                                                      'showAsBar': False,                                                      'sparkline': {'area': False,                                                                    'type': 'line',                                                                    'color': 0,                                                                    'title': '',                                                                    'format': '0.[0]a',                                                                    'height': 20,                                                                    'stroke': 2,                                                                    'dotLast': True,                                                                    'enabled': False,                                                                    'colorNeg': 0,                                                                    'dotFirst': True,                                                                    'rangeMax': '',                                                                    'rangeMin': '',                                                                    'labelDiff': False},                                                      'borderLeft': 'none',                                                      'fixedWidth': False,                                                      'barRangeMax': '',                                                      'barRangeMin': '',                                                      'borderRight': 'none',                                                      'compactMode': False,                                                      'customColor': False,                                                      'replaceFlags': False,                                                      'showOnMobile': True,                                                      'customColorBy': 0,                                                      'showOnDesktop': True,                                                      'customBarColor': False,                                                      'barNoBackground': False,                                                      'borderLeftColor': '#333333',                                                      'customColorText': {'__object': True},                                                      'barColorNegative': False,                                                      'customBarColorBy': 0,                                                      'alignmentVertical': 'middle',                                                      'customColorBackground': {'__object': True},                                                      'customColorBarBackground': {'__object': True}}},                    'heatmap': {'map': {},                                'mode': 'continuous',                                'stops': 'equidistant',                                'colors': [{'color': '#f0f9e8', 'position': 0},                                           {'color': '#b6e3bb',                                               'position': 0.16666666666666666},                                           {'color': '#75c8c5',                                               'position': 0.3333333333333333},                                           {'color': '#4ba8c9', 'position': 0.5},                                           {'color': '#2989bd',                                               'position': 0.6666666666666666},                                           {'color': '#0a6aad',                                               'position': 0.8333333333333334},                                           {'color': '#254b8c', 'position': 1}],                                'palette': 0,                                'rangeMax': '',                                'rangeMin': '',                                'stopCount': 5,                                'hideValues': False,                                'customStops': [],                                'rangeCenter': '',                                'categoryOrder': [],                                'interpolation': 'equidistant',                                'categoryLabels': {}},                    'perPage': 50,                    'striped': True,                    'markdown': False,                    'showRank': False,                    'sortTable': False,                    'pagination': {'enabled': True, 'position': 'top'},                    'searchable': True,                    'showHeader': True,                    'sortDirection': 'desc',                    'chart-type-set': True,                    'mobileFallback': False,                    'mergeEmptyCells': False,                    'firstRowIsHeader': False,                    'firstColumnIsSticky': False}            }        }    elif chartType == "Map":        chart_config = {            'title': title,            'folderId': folderid,            'type': 'd3-maps-symbols',            'metadata': {                'axes': {'lat': 'lat', 'lon': 'lon', 'address': 'City, State'},                'describe': {                    'source-name': 'Rent.',                    'source-url': '',                    'intro': 'Top-five least expensive places to live within the state of {}.'.format(state.title()),                    'byline': '',                    'aria-description': '',                    'number-format': '-',                    'number-divisor': 0,                    'number-append': '',                    'number-prepend': '',                    'hide-title': False                },                'visualize': {                    'dark-mode-invert': True,                    'highlighted-series': [],                    'highlighted-values': [],                    'labels': {'max': 1, 'type': 'places', 'places': [], 'enabled': False},                    'basemap': '{}-counties'.format(state.replace(" ", "-").lower()),                    'legends': {'size': {'type': 'stacked',                                         'enabled': False,                                         'offsetX': 0,                                         'offsetY': 0,                                         'position': 'above',                                         'titleWidth': 200,                                         'labelFormat': 'auto',                                         'titleEnabled': True,                                         'labelPosition': 'right',                                         'titlePosition': 'left',                                         'valuesSetting': 'auto'},                                'color': {'size': 170,                                          'title': '',                                          'labels': 'ranges',                                          'enabled': True,                                          'offsetX': 0,                                          'offsetY': 0,                                          'reverse': False,                                          'labelMax': 'high',                                          'labelMin': 'low',                                          'position': 'above',                                          'hideItems': [],                                          'interactive': False,                                          'labelCenter': 'medium',                                          'orientation': 'horizontal',                                          'customLabels': []}},                    'tooltip': {'body': 'Population: {{ FORMAT(population, "0,0.[00]") }}\n\n2-Bed Rent: ${{ FORMAT(_2_bed_asking_rent, "0,0") }}\n\nMedian Home Value: ${{ FORMAT(median_home_value, "0,0") }}\n\nMedian Income: ${{ FORMAT(median_income, "0,0") }}\n\nScore: {{ FORMAT(score, "0.00") }}',                                'title': '{{ city_state }}',                                'sticky': False,                                'enabled': True},                    'max-size': 40,                    'zoomable': False,                    'map-align': 'center',                    'clustering': {'size': 24,                                   'type': 'noverlap',                                   'color': 0,                                   'enabled': False,                                   'gridSize': 15,                                   'showCount': True,                                   'tolerance': 0,                                   'iterations': 4,                                   'aggregation': 'none'},                    'colorscale': {'map': {},                                   'mode': 'continuous',                                   'stops': 'equidistant',                                   'colors': [],                                   'palette': 0,                                   'rangeMax': '',                                   'rangeMin': '',                                   'stopCount': 5,                                   'customStops': [],                                   'rangeCenter': '',                                   'categoryOrder': [],                                   'interpolation': 'equidistant',                                   'categoryLabels': {}},                    'fixed-size': 25,                    'max-height': 650,                    'map-padding': 0,                    'map-type-set': True,                    'symbol-color': '#ee493a',                    'symbol-shape': 'marker',                    'symbol-stroke': {'mode': 'same',                                      'color': '#000000',                                      'enabled': True,                                      'opacity': 0.6},                    'blend-multiply': True,                    'chart-type-set': True,                    'clusterTooltip': {'body': '', 'title': '', 'sticky': True, 'enabled': False},                    'min-label-zoom': 1,                    'symbol-opacity': 0.9,                    'zoom-button-pos': 'br',                    'text-annotations': [],                    'range-annotations': [],                    'responsive-symbol-size': False                }            }        }    headers = {        'Authorization': 'Bearer ' + API_TOKEN,        'Content-Type': 'application/json'    }    # Create the chart    response = requests.post(url, headers=headers,                             data=json.dumps(chart_config))    #print(response.json())    chart_id = response.json()['id']    filepath_ext = save_path + "dw_id.txt"    if not configs['debug']:        save_chart_ids(filepath_ext, chart_id)    return chart_id# get already saved ids/posted data, or create newone.def post_data_with_id(dataframe_data, chart_id):    # Now, let's add data to the chart    data_url = f'https://api.datawrapper.de/v3/charts/{chart_id}/data'    data = dataframe_data    headers = {        'Authorization': 'Bearer ' + API_TOKEN,        'Content-Type': 'text/csv'    }    response = requests.put(data_url, headers=headers,                            data=data.to_csv(index=False))def save_chart_ids(fp, chartid):    with open(fp, 'w') as file:        file.write(chartid)def read_chart_id(fp):    myid = ""    # possible breaking point if file was modified by human    with open(fp, 'r') as file:        for line in file:            myid += line    return myiddef update_config_first_run(search, to):    # Read the content of the file    with open('config.txt', 'r') as file:        lines = file.readlines()    # Modify the value of first_run if found    with open('config.txt', 'w') as file:        for line in lines:            if line.startswith('{}'.format(search)):                line = line.replace(search, to)            file.write(line)def post_chart_online(chart_id, savepath=None):    urlz = 'https://api.datawrapper.de/v3/charts/{}/publish'.format(chart_id)    headers = {        'Authorization': 'Bearer ' + API_TOKEN,        'Content-Type': 'application/json'    }    response = requests.post(urlz, headers=headers)    #print(response.json())    responsive = response.json(    )['data']['metadata']['publish']['embed-codes']['embed-method-web-component']    if savepath:        savepath += "embed_code.txt"        save_chart_ids(savepath, responsive)    return responsivedef patch_chart_new_data(dataframe, chart_id):    # Upload new data here.    post_data_with_id(dataframe, chart_id)    # update time stamp after awaiting above    url = f"https://api.datawrapper.de/v3/charts/{chart_id}"    headers = {        "Authorization": f"Bearer {API_TOKEN}",        "Content-Type": "application/json"    }    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")    payload = {        "metadata": {            "annotate": {                "notes": f"Last update: {current_time}"            }        }    }    # Send the PATCH request    response = requests.patch(url, json=payload, headers=headers)    #print(response.json())    # Check the response status    if response.status_code == 200:        print("Patch request successful")    else:        print(f"Error: {response.status_code} - {response.text}")    post_chart_online(chart_id)def helper_stateab_to_state(state_ab):    us_state_to_abbrev = {        "Alabama": "AL",        "Alaska": "AK",        "Arizona": "AZ",        "Arkansas": "AR",        "California": "CA",        "Colorado": "CO",        "Connecticut": "CT",        "Delaware": "DE",        "Florida": "FL",        "Georgia": "GA",        "Hawaii": "HI",        "Idaho": "ID",        "Illinois": "IL",        "Indiana": "IN",        "Iowa": "IA",        "Kansas": "KS",        "Kentucky": "KY",        "Louisiana": "LA",        "Maine": "ME",        "Maryland": "MD",        "Massachusetts": "MA",        "Michigan": "MI",        "Minnesota": "MN",        "Mississippi": "MS",        "Missouri": "MO",        "Montana": "MT",        "Nebraska": "NE",        "Nevada": "NV",        "New Hampshire": "NH",        "New Jersey": "NJ",        "New Mexico": "NM",        "New York": "NY",        "North Carolina": "NC",        "North Dakota": "ND",        "Ohio": "OH",        "Oklahoma": "OK",        "Oregon": "OR",        "Pennsylvania": "PA",        "Rhode Island": "RI",        "South Carolina": "SC",        "South Dakota": "SD",        "Tennessee": "TN",        "Texas": "TX",        "Utah": "UT",        "Vermont": "VT",        "Virginia": "VA",        "Washington": "WA",        "West Virginia": "WV",        "Wisconsin": "WI",        "Wyoming": "WY",        "District of Columbia": "DC",        "American Samoa": "AS",        "Guam": "GU",        "Northern Mariana Islands": "MP",        "Puerto Rico": "PR",        "United States Minor Outlying Islands": "UM",        "U.S. Virgin Islands": "VI",    }    abbrev_to_us_state = dict(map(reversed, us_state_to_abbrev.items()))    return abbrev_to_us_state[state_ab]def create_folder_dw(filename, parentId=None):    url = "https://api.datawrapper.de/v3/folders"    if parentId:        payload = {"name": filename, 'parentId': parentId}    else:        payload = {"name": filename}    headers = {        "accept": "*/*",        'Authorization': 'Bearer ' + API_TOKEN,        'Content-Type': 'application/json'    }    response = requests.post(url, json=payload, headers=headers)    return response.json()['id']# SAVING FILEID AT 2nd level.def create_dw_folder_structure(parent_name):    print('Creating DW Directory Structure.')    # Parent folder    parent_folder = create_folder_dw(parent_name)    stateab_folderid = {}    # TODO/LEARN: HAVE THIS DYNAMIC WITHIN SIGNATURE    for state in [f for f in os.listdir("states") if re.search(r'[A-Z]{2}', f)]:        second_level_id = create_folder_dw(state, parent_folder)        stateab_folderid[state] = second_level_id    print('Done')    return stateab_folderidif __name__ == "__main__":    print(configs)    # create ids, save to correct locations, create charts.    if configs['first_run'] == 'True':        # PARENTID        base_f_name = "cheapest_cities"        # create key : value pair where key is stateab, value is folderid.         state_f_ids = create_dw_folder_structure(base_f_name)        num_iterations = 0        for file in glob.glob('states/*/*/data.csv'):            print('Creating configs, and punlishing for: {}'.format(file))            # get            state_ab = file.split("/")[1]            folderid = state_f_ids[state_ab]            save_path = file.replace("data.csv", "")            mydata = pd.read_csv(file)            state = helper_stateab_to_state(file.split('/')[1].upper())            # Clean data.            mydata.rename({'date': 'Date'}, inplace=True, axis=1)            # Done            # create id chart within datawrapper.            if 'Table' in save_path:                my_table_title = 'Cheapest Cities in {} Table'.format(state.title())                # write chartID to savepath/dw_id.txt.                  c_id = create_single_id(save_path, 'Table', state, my_table_title, folderid)                # Clean data for table                mydata = mydata.sort_values(by=['Score'], ascending=False)            elif "Timeseries" in save_path:                my_time_series_title = 'Rent Trends for {}'.format(state.title())                c_id = create_single_id(save_path, 'Timeseries', state, my_time_series_title, folderid)            elif 'Map' in save_path:                my_map_title = 'Cheapest Cities in {} Map'.format(state.title())                c_id = create_single_id(save_path, 'Map', state, my_map_title, folderid)            # Upload Data            post_data_with_id(mydata, c_id)            post_chart_online(c_id, save_path)                        num_iterations += 1             if configs['debug'] == 'True' and num_iterations >=  10:                break                        # Uncomment when debug phase over.        if not configs['debug']:            update_config_first_run("first_run=True", 'first_run=False')    # pull ids from data.    else:        globs_len = len(glob.glob('states/*/*/data.csv'))        issue_len = 0        curr_day = datetime.now()        list_of_files_changed = []        for file in glob.glob('states/*/*/data.csv'):            modify_file_date = os.path.getmtime(file)            mdy = datetime.fromtimestamp(modify_file_date).strftime('%m/%d/%Y')            # if modify date is newer than date in config update graph.            if mdy > datetime.strptime(configs['create_files_date'], '%m/%d/%Y'):                list_of_files_changed.append(file)                                pass            else:                print(                    f"{file}:\tWas not Updated on last run of cheapestCities_datawrapper.py.  Not updating Chart.")                issue_len += 1        if list_of_files_changed:            update_config_first_run("create_files_date={}".format(configs['create_files_date']), "create_files_date={}".format(curr_day.strftime("%m/%d/%Y")))        # Get Ids of modded file, and the data.        for modded_file in list_of_files_changed:            id_file = modded_file.replace("data.csv", "dw_id.txt")            with open(id_file) as f:                chart_id = f.readline()            new_data = pd.read_csv(modded_file)            new_data.rename({'date': 'Date'}, inplace=True, axis=1)            # patches and posts new data.            if 'Table' in modded_file:                new_data = new_data.sort_values(by=['Score'], ascending=False)            try:                print("Patching:\t{}".format(modded_file))                patch_chart_new_data(new_data, chart_id)                print("Patch Finished.")            except Exception as e:                print(modded_file)                print(e)